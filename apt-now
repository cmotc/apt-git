#! /bin/sh
DRY_RUN="NO"
RESET="NO"

pwd

CURDIR=$(pwd)

REPONAME="Testing Repository"
REPODESC="This is a place where I put testable packages of my apps."
ORIGIN="user.github.io"
CODENAME="testing"
REPOARCH="i386"
POLICY="main"
KEY="Example"
OVERRIDE="override.testing"

if [ -f /usr/local/bin/pkpage-html ]; then
        alias pkpage-html=/usr/local/bin/pkpage-html
elif [ -f ./pkpage.sh ]; then
        alias pkpage-html="/bin/bash -c \"markdown <($CURDIR/pkpage $@)\""
fi
SRCDIR="$CURDIR/packages"

. "./aptnow.conf"

while [ "$#" -gt 0 ]; do
	arg="$1"
	case $arg in
		-d|--directory)
			CURDIR="$2"
			shift
		;;
		-o|--origin)
			ORIGIN="$2"
			shift
		;;
		-c|--codename)
			CODENAME="$2"
			shift
		;;
		-a|--arch)
			REPOARCH="$2"
			shift
		;;
		-p|--policy)
			POLICY="$2"
			shift
		;;
		-k|--key)
			KEY="$2"
			shift
		;;
		-s|--sources)
			SRCDIR="$2"
			shift
		;;
		-q|--override)
			OVERRIDE="$2"
			shift
		;;
		-m,|--message)
			MESSAGE="$2"
			shift
		;;
                -n,|--name)
			REPONAME="$2"
			shift
		;;
                -v,|--desc)
			REPODESC="$2"
			shift
		;;
		-c|--check)
			CHECK="YES"
		;;
		-r|--reset)
			RESET="YES"
		;;
		-u|--user|--org|--organization)
			ORG="YES"
		;;
		-h|--help)
			H="YES"
			DRY_RUN="YES"
		;;
	esac
	shift
done
KEYNAME=$(echo $ORIGIN | tr "/" ".")
HELP="
apt-now personal repository tool\n
================================\n
This tool helps developers host their own applications by posting them to \n
static pages for download. \n
\t	-d \ --directory\n
\t\t		Work in this directory, uses current directory by default\n
\t	-o \ --origin\n
\t\t		URL of the repository\n
\t	-c \ --codename\n
\t\t		Codename you want to use, defaults is \"testing\"\n
\t	-a \ --arch\n
\t\t		Architecture you want to host, defaults to \"all\"\n
\t	-p \ --policy\n
\t\t		Policy of packages you want to host, defaults to \"main\"\n
\t	-k \ --key\n
\t\t		ID of the package signing key\n
\t	-s \ --sources\n
\t\t		Folder with the packages to include in the repo\n
\t	-q \ --override\n
\t\t		Name of the override file\n
\t	-m \ --message\n
\t\t		Message to include in the commit\n
\t	-n \ --name\n
\t\t		Human-readable name of the Repository\n
\t	-v \ --desc\n
\t\t		Detailed repository description\n
\t	-c \ --check\n
\t\t		Make sure the dependencies are installed\n
\t	-r \ --reset\n
\t\t		Re-generate all components of the repository\n
\t	-u \ --user \ --org \ --organization\n
\t\t		Us as user/organization page, post page to master branch\n
\t	-h \ --help\n
\t\t		Display this help message\n

to add this repository to your Debian-based system:\n
\t\t	echo \"deb https://$ORIGIN/debian unstable main\" | sudo tee /etc/apt/source.list.d/$ORIGIN.list\n
\t	wget -q0 - https://$ORIGIN/$KEYNAME.gpg.key | sudo apt-key add -\n
"

BASEDIR="$CURDIR/debian"
CONFDIR="$CURDIR/debian/conf"
INFODIR="$CURDIR/info"
if [ ! -d "$INFODIR" ]; then
        mkdir -p "$INFODIR"
else
        \rm -rf "$INFODIR"
        mkdir -p "$INFODIR"
fi

confirm(){
	read -r -p "${1: -Are you sure? [y/N]} " response
	case $response in
		[yY][eE][sS])
			local s="YES"
			;;
		*)
			local s="NO"
			;;
	esac
	echo "$s"
}

checkdepends(){
	sudo apt-get install gnupg git rng-tools dpkg-sig reprepro
	sudo service rng-tools start
}

generatekey(){
	gpg --gen-key
}

enterkey(){
	KEYED="NO"
	while [ "$KEYED"="NO" ]; do
		read -r -p "Enter the key that you want to use to sign your repository" KEY
		KEYED=confirm
	done
}

createdirs(){
	if [ -d "$CONFDIR" ]; then
		echo "directory exists"
	else
		mkdir -p "$CONFDIR"
	fi
}

gendistrofile(){
	echo "Origin: $ORIGIN"		> "$CONFDIR/distributions"
	echo "Label: $ORIGIN"		>> "$CONFDIR/distributions"
	echo "Codename: $CODENAME"	>> "$CONFDIR/distributions"
	echo "Architectures: $REPOARCH"	>> "$CONFDIR/distributions"
	echo "Components: $POLICY"	>> "$CONFDIR/distributions"
	#echo "Description: $REPODESC"	>> "$CONFDIR/distributions"
	echo "SignWith: $KEY"		>> "$CONFDIR/distributions"
	echo "DebOverride: $OVERRIDE"	>> "$CONFDIR/distributions"
	echo "DscOverride: $OVERRIDE"	>> "$CONFDIR/distributions"
	touch "$CONFDIR/$OVERRIDE"
}

genconfoptions(){
	echo "verbose"		> "$CONFDIR/options"
	echo "ask-passphrase"	>> "$CONFDIR/options"
	echo "basedir $BASEDIR"	>> "$CONFDIR/options"
}

generaterkey(){
        KEYNAME=$(echo $ORIGIN | tr "/" ".")
	gpg --armor --output "$CURDIR/$KEYNAME.gpg.key" --export $KEY
}

includepackages(){
	cd $SRCDIR
	for f in *.deb ; do
                reprepro --basedir $BASEDIR includedeb $CODENAME "$f";
		TITLE="$f"
		hdpage > $INFODIR/$f.html
                pkpage-html -f $f >> $INFODIR/$f.html
                echo "</html>" >> $INFODIR/$f.html
        done
	for f in *.dsc ; do
                reprepro --basedir $BASEDIR includedsc $CODENAME "$f";
        done
	for f in *.changes ; do
                reprepro --basedir $BASEDIR include $CODENAME "$f";
        done
	cd ..
#	reprepro include "$SRCDIR/*"
}

constructindex(){
    KEYNAME=$(echo $ORIGIN | tr "/" ".")
        INDEX_HEADER="$REPONAME\n
============\n
$CODENAME\n
------------\n
###$REPOARCH\n
###$POLICY\n
###$KEY\n
###$ORIGIN\n
####Latest update: $DATE\n
"
        INDEX_DETAIL="###Description:\n
$REPODESC\n"
        INDEX_FOOTER="This repository was generated with [apt-git](https://cmotc.github.io/apt-git), a static site
generator which emits apt repositories

###to add this repository to your Debian-based system:

        echo \"deb https://$ORIGIN/debian unstable main\" | sudo tee /etc/apt/source.list.d/$KEYNAME.list\n
        wget -q0 - https://$ORIGIN/$KEYNAME.gpg.key | sudo apt-key add -\n
"
        echo $INDEX_HEADER | sed -e 's/^[ \t]*//' > $INFODIR/index.md
        echo $INDEX_DETAILS | sed -e 's/^[ \t]*//' >> $INFODIR/index.md
        cd $INFODIR
	for f in *.html ; do
                TRIMMED_CLEAN=$(echo $f | sed -e 's/.html/ /')
                echo "  * [$TRIMMED_CLEAN](info/$f) \n" >> $INFODIR/index.md
        done
        cd ..
        #echo $INDEX_FOOTER >> $INFODIR/index.md
        echo "$INDEX_FOOTER" | sed -e 's/^[ \t]*//' >> $INFODIR/index.md
        export TITLE="$REPONAME"
        hdpage > index.html
        markdown $INFODIR/index.md >> $CURDIR/index.html
        echo "</html>" >> $CURDIR/index.html
}

if [ "$H" = "YES" ]; then
	echo $HELP
        exit 1
fi
if [ "$DRY_RUN" = "NO" ]; then
	if [ -d "$SRCDIR" ]; then
		if [ -d "$CURDIR/.git" ]; then
			if [ "$RESET" = "YES" ]; then
				CHECK="YES"
				echo "cleaning existing repo"
				rm -rf "$BASEDIR"
			fi
			if [ "$CHECK" = "YES" ]; then
				echo "checking dependencies"
				checkdepends
				createdirs
			fi
			if [ "$RESET" = "YES" ]; then
				echo "generating keys"
				generatekey
				enterkey
				echo "creating directories"
			fi
			echo "generating distro file"
			gendistrofile
			echo "generating conf options"
			genconfoptions
			echo "outputting key"
			generaterkey
			echo "setting up packages"
			includepackages
			DATE=date
                        constructindex
			if [ "$ORG" = "YES" ]; then
				git add . && git commit -am "Repository update: $MESSAGE $DATE" && git push origin master
			else
				git add . && git commit -am "Repository update: $MESSAGE $DATE" && git push origin gh-pages
			fi
		else
			echo "Fatal Error, this is not a git repository. Please create a git repository and enable github pages to use this script."
		fi
	else
		echo "Fatal Error, packages not found in package source directory"
	fi
fi
